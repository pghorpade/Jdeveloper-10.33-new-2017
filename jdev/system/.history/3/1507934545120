/*
 * @(#) AudioProcessor.java 1.0 02/07/2006
 *
 * Copyright © 2005 UCLA Digital Library
 * 390 Powell, Los Angeles, CA 90095
 * All Rights Reserved.
 */
package edu.ucla.library.digital.dlcs.core;

import edu.ucla.library.digital.dlcs.exception.DLException;
import static edu.ucla.library.digital.dlcs.util.Constants.AUDIO_CONVERT_INPUT_PROFILES;
import static edu.ucla.library.digital.dlcs.util.Constants.AUDIO_CONVERT_OUTPUT_PROFILES;
import static edu.ucla.library.digital.dlcs.util.Constants.AUDIO_CONVERT_PROG;
import static edu.ucla.library.digital.dlcs.util.Constants.AUDIO_FTP_SERVER_LOGIN;
import static edu.ucla.library.digital.dlcs.util.Constants.AUDIO_VIDEO_FTP_SERVER;
import static edu.ucla.library.digital.dlcs.util.Constants.DLCONTENT_BASE_URL;
import static edu.ucla.library.digital.dlcs.util.Constants.REALSERVER_BASE_URL;
import edu.ucla.library.digital.dlcs.util.FtpContent;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.FileUtils;

import org.jdom.Element;
import org.jdom.IllegalDataException;
import org.jdom.output.XMLOutputter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * The <code>AudioProcessor</code> class handles all the processing of submasters
 * for Audio.
 *
 * @author Curtis Fornadley
 */
public class AudioProcessor {
    private static Logger logger = LoggerFactory.getLogger(AudioProcessor.class);
    private String ramFilename = null;
    //private String smilFilename = null;
    private String pathToContent = null;

    /**
     * Uses a Runtime.exec()to use Cleaner Xl 1.5 to perform the given conversion
     * operation. Returns true on success, false on failure. Does not check if
     * either file exists.
     * 
     * @return true if audio was converted. Otherwise, false.
     * @param outPath String
     * @param fin File
     * 
     * Sample:
     * 
     * "Cleaner XL" /I "C:\Program Files\Autodesk\Cleaner XL 1.5\InputProfiles\CD or DVD\CD Audio.ipt" /O "C:\Program Files\Autodesk\Cleaner XL 1.5\OutputProfile\Audio\DOT_MP3\MP3 Audio download medium.opt" /D c:\CleanerOutput /sources c:\CleanerInput\test.wav
     * "Cleaner XL" /I "C:\Program Files\Autodesk\Cleaner XL 1.5\InputProfiles\CD or DVD\CD Audio.ipt" 
     * /O "C:\Program Files\Autodesk\Cleaner XL 1.5\OutputProfile\Audio\DOT_MP3\MP3 Audio download medium.opt" 
     * /D c:\CleanerOutput 
     * /sources c:\CleanerInput\test.wav 
     * 
     * on lis55  
     * "Cleaner XL" /I "D:\DLCS\Cleaner XL 1.5\InputProfiles\CD or DVD\CD Audio.ipt" /O "D:\DLCS\Cleaner XL 1.5\OutputProfile\Audio\DOT_MP3\MP3 Audio download medium.opt" /D D:\DLCS\outputContent /sources d:\DLCS\inputContent\test.wav
     * "Cleaner XL" /I "D:\DLCS\Cleaner XL 1.5\InputProfiles\CD or DVD\CD Audio.ipt"
     * /O "D:\DLCS\Cleaner XL 1.5\OutputProfile\Audio\DOT_MP3\MP3 Audio download medium.opt" 
     * /D D:\DLCS\outputContent 
     * /sources d:\DLCS\inputContent\test.wav  
     * 
     * Processing parameteres are set in the respective input and output profiles
     * 
     * 
     */
    public boolean convert(final File fin, final String outPath, 
                           final String dataRate, 
                           final String audioDataEncoding, 
                           final String masterMimeType) throws DLException {
        if (logger.isTraceEnabled()) {
            logger.trace("Entering convert()");
        }
        
        if (logger.isDebugEnabled()) {
            logger.debug("outPath => {}", outPath);
            logger.debug("dataRate => {}", dataRate);
            logger.debug("audioDataEncoding => {}", audioDataEncoding);
            logger.debug("masterMimeType => {}", masterMimeType);
        }
        
        boolean converted = false;
        List command = new ArrayList(10);
        String audioInputProfile = null;
        String audioOutputProfile = null;

        if ("audio/x-wav".equals(masterMimeType)) {
            audioInputProfile = "\\CDAudio.ipt";
        }

        if ("MPEG1".equals(audioDataEncoding) && "128 Kbps".equals(dataRate)) {
            audioOutputProfile = "\\DLCS-MP3Audio-128kbps.opt";
        }

        if (logger.isInfoEnabled()) {
            logger.info("Input profile => {}", audioInputProfile);            
            logger.info("Output profile => {}", audioOutputProfile);
        }
        /**
         * NOTE: AUDIO_CONVERT_PROG is a class variable that stores the location of Autodesk Cleaner XL command
         * DO NOT use spaces in the path names to profiles
         *
         * The Cleaner XL and the  paths to profiles reside on same machine as the application server
         * See Constants.java
         * Cleaner XL install dir: D:\DLCS\Cleaner XL 1.5
         * D:\DLCS\outputProfiles
         * D:\DLCS\inputProfiles
         */

        /** check for file existence */
        //        File cleanerFile = new File(Constants.AUDIO_CONVERT_PROG + "\\Cleaner XL.com" );
        //        logger.debug("Can we get to  Cleaner XL.com?: " + cleanerFile.exists());
        //        logger.debug("Cleaner XL.com path: " + cleanerFile.getAbsolutePath());

        /** Build the command */
        command.add("cmd.exe");
        command.add("/C");
        command.add(AUDIO_CONVERT_PROG + "\\Cleaner XL.com");
        command.add("/I");
        //command.add(AUDIO_CONVERT_INPUT_PROFILES + audioInputProfile); //"\\CDAudio.ipt");
        command.add("/O");
        command.add(AUDIO_CONVERT_OUTPUT_PROFILES + audioOutputProfile); //"\\MP3Audiodownloadmedium.opt"); 
        command.add("/D");
        command.add(outPath);
        command.add("/sources");
        command.add(fin.getAbsolutePath());
                
        converted = exec((String[])command.toArray(new String[1]));
        
        if (!converted && logger.isInfoEnabled()) {
            logger.info("Audio convertion failed: {}", fin.getAbsolutePath());
        }
        logger.info("Audio command is {}", command.toString());
        command.clear();
        
        if (logger.isTraceEnabled()) {
            logger.trace("Leaving convert(...)");
        }
        
        return converted;
    }

    /**
     * Tries to exec the command, waits for it to finish, logs errors if exit
     * status is nonzero, and returns true if exit status is 0 (success).
     *
     * @return true if command executed successfully. Otherwise, false.
     * @param command String[]
     */
    private static boolean exec(final String[] command) {
        boolean processed = false;
        try {
            Process process = Runtime.getRuntime().exec(command);

            StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), "OUTPUT");
            StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), "ERROR");

            outputGobbler.start();
            errorGobbler.start();

            int exitValue = process.waitFor();

            outputGobbler.join();
            errorGobbler.join();

            if (exitValue == 0) {
                processed = true;
            } else {
                process.destroy();
                if (logger.isInfoEnabled()) {
                    logger.info("Failed to process audio. Exit value: {}", exitValue);
                }
            }
        } catch (IOException e) {
            if (logger.isErrorEnabled()) {
                logger.error("IOException caught in exec {}", e.toString());
            }
        } catch (InterruptedException e) {
            if (logger.isErrorEnabled()) {
                logger.error("InterruptedException caught in exec {}", e.toString());
            }
        }
        return processed;
    }

    /**
     * ftpMaster
     * @throws edu.ucla.library.digital.dlcs.exception.DLException
     * @return 
     * @param webAppName
     * @param outSubmasterFile
     */
    public boolean ftpMaster(final File outSubmasterFile, final String webAppName) throws DLException {
        FtpContent ftpContent = new FtpContent(AUDIO_VIDEO_FTP_SERVER, 
                                               AUDIO_FTP_SERVER_LOGIN, "waliays", 
                                               "binary", webAppName);
        ftpContent.init();
        boolean wasFtpSuccess = ftpContent.storeFile(outSubmasterFile);
        if (!wasFtpSuccess) {
            if (logger.isInfoEnabled()) {
                logger.info("Failed to FTP file {} to the Real Server", outSubmasterFile.getName());
            }
            throw new DLException("Failed to FTP file to the Real Server: " + outSubmasterFile.getName());
        }

        setPathToContent(ftpContent.getPathToFile());
        
        ftpContent.logout();
        ftpContent.exit();
        
        return wasFtpSuccess;
    }

    /**
   * createSMIL
   * @return
   * @param submastersDir
   * @param pathToContent
   * @param baseFileName
   * @param outSubmasterFile
   *
   * smil example
   *
   * <smil>
   *   <head>
   *      <meta name="base" content="rtsp://audio.library.ucla.edu/audio/dlcs/<webAppName>/"/>
   *   </head>
   *   <body>
   *       <audio src="21198-zz00010dw0-1-submaster.mp3"/>
   *   </body>
   * </smil>
   *
   *  TO reduce amount played back use this
   * <smil>
   *   <head>
   *      <meta name="base" content="rtsp://audio.library.ucla.edu/audio/dlcs/<webAppName>/"/>
   *   </head>
   *   <body>
   *      <audio src="21198-zz00010dw0-1-submaster.mp3" end="60s"/>
   *   </body>
   * </smil>
   */

    /**
     * createSMIL
     * @param outSubmasterFile
     * @param fileName
     * @param submastersDir
     * @return
     */
    public boolean createSMIL(final File outSubmasterFile, final String fileName, final String submastersDir) { //String pathToContent,
        boolean isCreated = false;

        String smilFilename = fileName + ".smil";
        org.jdom.Document jDocXml = null;
        
        try {
            Element root = new Element("smil");
            jDocXml = new org.jdom.Document(root);

            Element headElement = new Element("head");
            root.addContent(headElement);

            Element metaElement = new Element("meta");
            headElement.addContent(metaElement);
            metaElement.setAttribute("name", "base");
            metaElement.setAttribute("content", REALSERVER_BASE_URL + pathToContent);

            Element bodyElement = new Element("body");
            root.addContent(bodyElement);

            Element audioElement = new Element("audio");
            bodyElement.addContent(audioElement);
            audioElement.setAttribute("src", outSubmasterFile.getName());
            //audioElement.setAttribute("end", "60s");

            XMLOutputter out = new XMLOutputter();
            FileWriter outFile = new FileWriter(submastersDir + "smil\\" + smilFilename);
            out.output(jDocXml, outFile);
            outFile.close();
            isCreated = true;

        } catch (IllegalDataException ide) {
            if (logger.isErrorEnabled()) {
                logger.error("IllegalDataException caught in createSMIL for filen name: {} - {}", outSubmasterFile.getName(), ide.toString());
            }
        } catch (IOException ioe) {
            if (logger.isErrorEnabled()) {
                logger.error("Failed to create SMIL file: {} - {}", outSubmasterFile.getName(), ioe.toString());
            }
            //} catch (JDOMException je) {
            // System.out.println("JDOM Exception creating Smil file: " + outSubmasterFile.getName() + "  " +  je);
        }

        return isCreated;
    }


    /**
     * createRAM creates a one line file that points to a SMIL file to play audio using the Real Server
     * ram example: http://digidev.library.ucla.edu/test/smil/21198-zz00010dw0-1.smil
     * @param fileName
     * @param submastersDir
     * @return
     */
    public boolean createRAM(final String fileName, final String submastersDir) { //File outSubmasterFile,String pathToContent,
        boolean isCreated = false;
        String data = DLCONTENT_BASE_URL + pathToContent + "smil/" + fileName + ".smil";
        
        setRamFilename(fileName + ".ram");

        if (logger.isDebugEnabled()) {
            logger.debug("Full path to RAM file " + submastersDir + "ram\\" + ramFilename);
        }
        
        try {
            StringReader inReader = new StringReader(data);
            FileOutputStream outFile = new FileOutputStream(submastersDir + "ram\\" + ramFilename);
            BufferedOutputStream bos = new BufferedOutputStream(outFile);
            int c;
            while ((c = inReader.read()) != -1) {
                bos.write(c);
            }
            isCreated = true;

            try {
                inReader.close();
            } catch (Exception ex) {
                if (logger.isErrorEnabled()) {
                    logger.error("Exception caught in createRAM() closing StringReader: {}", ex.toString());
                }
            }
            try {
                bos.close();
            } catch (Exception ex) {
                if (logger.isErrorEnabled()) {
                    logger.error("Exception caught in createRAM() closing BufferedOutputStream: {}", ex.toString());
                }
            }
        } catch (Exception ex) {
            if (logger.isErrorEnabled()) {
                logger.error("Exception caught in createRAM {}", ex.toString());
            }
        }

        return isCreated;
    }

    protected boolean deleteRealFiles(final String fileLocation, 
                                      final String audioSubmastersDir, 
                                      final String fileName, 
                                      final String webAppName) throws DLException {
        /**
        * derive pathFile from smil files from ram files from fileLocation *
        * Note until a has routine for spreading files over directories is developed the pathToFile is just "<webAppName>/"
        * ex http://digidev.library.ucla.edu:8080/dlcontent/test/ram/21198-zz000117gt-1.ram
        */

        boolean isDeleted = false;
        FtpContent ftpContent = new FtpContent(AUDIO_VIDEO_FTP_SERVER, 
                                               AUDIO_FTP_SERVER_LOGIN, "waliays", 
                                               "binary", webAppName);
        //ftpContent.setPathToFile("temp"); discovered from smil files
        ftpContent.init();
        boolean wasFtpDeleteSuccess = ftpContent.deleteFile(fileName);
        ftpContent.logout();
        ftpContent.exit();
        
        String baseFileName = fileName.substring(0, fileName.indexOf('.'));
        
        File ramFile = new File(audioSubmastersDir + "ram\\" + baseFileName + ".ram");
        
        if (logger.isDebugEnabled()) {
            logger.debug(fileName + "  wasFtpDeleteSuccess " + wasFtpDeleteSuccess);
            logger.debug("basefilename " + baseFileName);
            logger.debug("Does RAM file exists? " + ramFile.exists());
        }
        
        if (ramFile.exists()) {
            try {
                FileUtils.forceDelete(ramFile);
            } catch (IOException ioe) {
                if (logger.isErrorEnabled()) {
                    logger.error("Failed to delete RAM file: {} - {}", ramFile.getName(), ioe.toString());
                }
            }
        }

        File smilFile = new File(audioSubmastersDir + "smil\\" + baseFileName + ".smil");
        if (logger.isDebugEnabled()) {
            logger.debug("Does SMIL file exists? " + smilFile.exists());
        }
        
        if (smilFile.exists()) {
            try {
                FileUtils.forceDelete(smilFile);
            } catch (IOException ioe) {
                if (logger.isErrorEnabled()) {
                    logger.error("Failed to delete SMIL file: {} - {}", smilFile.getName(), ioe.toString());
                }
            }
        }

        return isDeleted;
    }

    public String getRamFilename() {
        return ramFilename;
    }

    public String getPathToContent() {
        return pathToContent;
    }
    
    public void setRamFilename(final String ramFilename) {
        this.ramFilename = ramFilename;
    }

    public void setPathToContent(final String pathToContent) {
        this.pathToContent = pathToContent;
    }
}
